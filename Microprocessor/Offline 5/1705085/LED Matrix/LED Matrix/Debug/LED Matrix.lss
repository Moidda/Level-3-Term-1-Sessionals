
LED Matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000001ae  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a0  008000a0  00000282  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006be  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005e5  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dd  00000000  00000000  00000fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000388  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000126  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  8a:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_3>:
		0, 0, 1, 1, 1, 1, 0, 0,
};

volatile int rotate = 0;

ISR(INT2_vect) {
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	rotate ^= 1;
  a2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
  a6:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	82 27       	eor	r24, r18
  ae:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__data_end+0x1>
  b2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	2f 91       	pop	r18
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <main>:
{
	// This will disable JTAG in software (for PORTC to work in IO mode properly)
	// MCUCSR = (1<<JTD);
	// MCUCSR = (1<<JTD);
	
    DDRD = 0b11111111;						// make PORTD as output
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b11111111;						// make PORTC as output
  ca:	84 bb       	out	0x14, r24	; 20

	GICR = (1<<INT2);						// enabling interrupt 2
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	8b bf       	out	0x3b, r24	; 59
	MCUCSR = DISABLE(MCUCSR, ISC2);			// making the interrupt falling edge triggered
  d0:	84 b7       	in	r24, 0x34	; 52
  d2:	8f 7b       	andi	r24, 0xBF	; 191
  d4:	84 bf       	out	0x34, r24	; 52
	sei();									// enabling the interrupt subsystem globally
  d6:	78 94       	sei
	
	int offset = 0;
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	50 e0       	ldi	r21, 0x00	; 0
	int itr = 50;
	
    while (1) 
    {
		for(int i = 0; i < itr; i++) {
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	62 33       	cpi	r22, 0x32	; 50
  e2:	71 05       	cpc	r23, r1
  e4:	0c f0       	brlt	.+2      	; 0xe8 <main+0x22>
  e6:	4c c0       	rjmp	.+152    	; 0x180 <main+0xba>
  e8:	c0 e0       	ldi	r28, 0x00	; 0
			for(byte col = 0; col < 8; col++) {
  ea:	c8 30       	cpi	r28, 0x08	; 8
  ec:	08 f0       	brcs	.+2      	; 0xf0 <main+0x2a>
  ee:	45 c0       	rjmp	.+138    	; 0x17a <main+0xb4>
				COLUMN = 0;
  f0:	12 ba       	out	0x12, r1	; 18
				COLUMN = ENABLE(COLUMN, col);
  f2:	e2 b3       	in	r30, 0x12	; 18
  f4:	2c 2f       	mov	r18, r28
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0c 2e       	mov	r0, r28
  fe:	02 c0       	rjmp	.+4      	; 0x104 <main+0x3e>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <main+0x3a>
 108:	8e 2b       	or	r24, r30
 10a:	82 bb       	out	0x12, r24	; 18
				
				ROW = 0b11111111;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	85 bb       	out	0x15, r24	; 21
				for(byte row = 0; row < 8; row++)
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	a8 30       	cpi	r26, 0x08	; 8
 114:	50 f5       	brcc	.+84     	; 0x16a <main+0xa4>
					if(pattern[row][col] == 1)
 116:	8a 2f       	mov	r24, r26
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	ee 0f       	add	r30, r30
 122:	ff 1f       	adc	r31, r31
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	e0 5a       	subi	r30, 0xA0	; 160
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	e2 0f       	add	r30, r18
 12e:	f3 1f       	adc	r31, r19
 130:	e0 81       	ld	r30, Z
 132:	e1 30       	cpi	r30, 0x01	; 1
 134:	c1 f4       	brne	.+48     	; 0x166 <main+0xa0>
						ROW = DISABLE(ROW, (row-offset+8)%8);
 136:	b5 b3       	in	r27, 0x15	; 21
 138:	84 1b       	sub	r24, r20
 13a:	95 0b       	sbc	r25, r21
 13c:	08 96       	adiw	r24, 0x08	; 8
 13e:	87 70       	andi	r24, 0x07	; 7
 140:	90 78       	andi	r25, 0x80	; 128
 142:	99 23       	and	r25, r25
 144:	24 f4       	brge	.+8      	; 0x14e <main+0x88>
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	88 6f       	ori	r24, 0xF8	; 248
 14a:	9f 6f       	ori	r25, 0xFF	; 255
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	e1 e0       	ldi	r30, 0x01	; 1
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	8f 01       	movw	r16, r30
 154:	02 c0       	rjmp	.+4      	; 0x15a <main+0x94>
 156:	00 0f       	add	r16, r16
 158:	11 1f       	adc	r17, r17
 15a:	8a 95       	dec	r24
 15c:	e2 f7       	brpl	.-8      	; 0x156 <main+0x90>
 15e:	c8 01       	movw	r24, r16
 160:	80 95       	com	r24
 162:	8b 23       	and	r24, r27
 164:	85 bb       	out	0x15, r24	; 21
			for(byte col = 0; col < 8; col++) {
				COLUMN = 0;
				COLUMN = ENABLE(COLUMN, col);
				
				ROW = 0b11111111;
				for(byte row = 0; row < 8; row++)
 166:	af 5f       	subi	r26, 0xFF	; 255
 168:	d4 cf       	rjmp	.-88     	; 0x112 <main+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	83 ef       	ldi	r24, 0xF3	; 243
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0xa8>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0xae>
 174:	00 00       	nop
	int itr = 50;
	
    while (1) 
    {
		for(int i = 0; i < itr; i++) {
			for(byte col = 0; col < 8; col++) {
 176:	cf 5f       	subi	r28, 0xFF	; 255
 178:	b8 cf       	rjmp	.-144    	; 0xea <main+0x24>
	int offset = 0;
	int itr = 50;
	
    while (1) 
    {
		for(int i = 0; i < itr; i++) {
 17a:	6f 5f       	subi	r22, 0xFF	; 255
 17c:	7f 4f       	sbci	r23, 0xFF	; 255
 17e:	b0 cf       	rjmp	.-160    	; 0xe0 <main+0x1a>
				
				_delay_ms(1);
			}	
		}
	
		if(rotate) {
 180:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 184:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
 188:	89 2b       	or	r24, r25
 18a:	09 f4       	brne	.+2      	; 0x18e <main+0xc8>
 18c:	a7 cf       	rjmp	.-178    	; 0xdc <main+0x16>
			offset++;
 18e:	4f 5f       	subi	r20, 0xFF	; 255
 190:	5f 4f       	sbci	r21, 0xFF	; 255
			offset %= 8;
 192:	47 70       	andi	r20, 0x07	; 7
 194:	50 78       	andi	r21, 0x80	; 128
 196:	55 23       	and	r21, r21
 198:	0c f0       	brlt	.+2      	; 0x19c <main+0xd6>
 19a:	a0 cf       	rjmp	.-192    	; 0xdc <main+0x16>
 19c:	41 50       	subi	r20, 0x01	; 1
 19e:	51 09       	sbc	r21, r1
 1a0:	48 6f       	ori	r20, 0xF8	; 248
 1a2:	5f 6f       	ori	r21, 0xFF	; 255
 1a4:	4f 5f       	subi	r20, 0xFF	; 255
 1a6:	5f 4f       	sbci	r21, 0xFF	; 255
 1a8:	99 cf       	rjmp	.-206    	; 0xdc <main+0x16>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
